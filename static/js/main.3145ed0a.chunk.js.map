{"version":3,"sources":["features/quote/quoteSlice.js","features/quote/Quote.js","App.js","app/store.js","serviceWorker.js","index.js","features/quote/Quote.module.css"],"names":["randomQuote","createSlice","name","initialState","index","quotes","quote","author","reducers","newQuote","state","dontRepeat","current","min","max","newIndex","length","Math","floor","random","actions","selectIndex","Quote","rQuote","useSelector","dispatch","useDispatch","className","styles","id","text_wrapper","Text","Author","NewQuote","onClick","document","querySelector","style","opacity","setTimeout","TweetQuote","href","target","rel","App","useEffect","configureStore","reducer","quoteReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uOAOaA,EAAcC,YAAY,CACrCC,KAAM,QACNC,aAAc,CACZC,MAAO,EACPC,OAAQ,CACN,CAACC,MAAO,2JAA4JC,OAAQ,iBAC5K,CAACD,MAAO,kJAAmJC,OAAQ,kBACnK,CAACD,MAAO,uNAAmNC,OAAQ,kBACnO,CAACD,MAAO,gJAAiJC,OAAQ,kBACjK,CAACD,MAAO,+FAAgGC,OAAQ,+BAChH,CAACD,MAAO,iIAAkIC,OAAQ,qBAItJC,SAAU,CACRC,SAAU,SAACC,IAGU,SAAbC,EAAcD,EAAOE,GACzB,IAvBqBC,EAAKC,EAuBtBC,GAvBiBF,EAuBc,EAvBTC,EAuBYJ,EAAML,OAAOW,OAtBlDC,KAAKC,MAAMD,KAAKE,UAAYL,EAAID,GAAOA,IAuBxC,GAAID,IAAYG,EAId,OAAOJ,EAAWD,EAAOE,GAHzBF,EAAMN,MAAQW,EAOlBJ,CAAWD,EAZQA,EAAMN,WAiBhBK,EAAaT,EAAYoB,QAAzBX,SAKFY,EAAc,SAAAX,GAAK,OAAIA,EAAMJ,MAAMD,OAAOK,EAAMJ,MAAMF,QAEpDJ,IAAf,Q,gBCvCO,SAASsB,IAEd,IAAMC,EAASC,YAAYH,GACrBI,EAAWC,cAQjB,OACE,sBAAKC,UAAWC,IAAON,MAAOO,GAAG,YAAjC,UACE,qBAAKF,UAAWC,IAAOE,aAAvB,SACE,qBAAKH,UAAWC,IAAOG,KAAMF,GAAG,OAAhC,SAAwCN,EAAOjB,UAEjD,qBAAMqB,UAAWC,IAAOI,OAAQH,GAAG,SAAnC,SAA6CN,EAAOhB,SACpD,qBAAKoB,UAAWC,IAAOK,SAAUJ,GAAG,YAAYK,QAbhC,WAClBC,SAASC,cAAc,cAAcC,MAAMC,QAAU,IACrDC,YAAW,WACTd,EAAShB,KACT0B,SAASC,cAAc,cAAcC,MAAMC,QAAU,MAAO,MAS5D,uBACA,mBAAGX,UAAWC,IAAOY,WAAYX,GAAG,cAAcY,KAAM,0CAA6ClB,EAAOjB,MAAS,IAAOiB,EAAOhB,OAASmC,OAAO,SAASC,IAAI,aAAhK,sB,UCJSC,EAhBH,WACV,IAAMnB,EAAWC,cAMjB,OALAmB,qBAAU,WACRV,SAASC,cAAc,cAAcC,MAAMC,QAAU,IACrDb,EAAShB,QAIT,qBAAKkB,UAAU,MAAf,SAEI,cAACL,EAAD,OCbOwB,cAAe,CAC5BC,QAAS,CACPzC,MAAO0C,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJtB,SAASuB,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEpInBC,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,aAAe,4BAA4B,KAAO,oBAAoB,OAAS,sBAAsB,SAAW,wBAAwB,WAAa,6B","file":"static/js/main.3145ed0a.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n// import {randomImage} from './randomImage';\r\n\r\nconst getRandomQuoteIndex = (min, max) => {\r\n  return Math.floor(Math.random() * (max-min) + min);\r\n}\r\n\r\nexport const randomQuote = createSlice({\r\n  name: 'quote',\r\n  initialState: {\r\n    index: 0,\r\n    quotes: [\r\n      {quote: 'This is a useful point to bear in mind because most people who do a great deal of harm in the world are protected against the knowledge that they do so.', author: 'David Graeber'},\r\n      {quote: 'The process by which wealth is accumulated and distributed contains powerful forces pushing toward (...) an extremely high level of inequality.', author: 'Thomas Piketty'},\r\n      {quote: 'Weâ€™ve willfully deluded and disempowered ourselves by continuing to appeal to the existing political arrangement of representation. Our blind faith has us waiting endlessly for a savior to drop from the sky.', author: 'Simon Springer'},\r\n      {quote: 'Human beings have a fundamental desire for wholeness satisfied through their attachments to each other, their environment, and with Creation.', author: 'Christina Grof'},\r\n      {quote: 'The pure always act from love. The damned always act from love. The truth is an act of love.', author: 'James Newell Osterberg, Jr.'},\r\n      {quote: 'The very tissue of spatial experience alters, conjoining proximity and distance in ways that have few parallels in prior ages.', author: 'Anthony Giddens'},\r\n      //{quote: randomImage(), author: ''}\r\n    ]\r\n  },\r\n  reducers: {\r\n    newQuote: (state) => {\r\n      let currentIndex = state.index;\r\n\r\n      const dontRepeat = (state, current) => {\r\n        let newIndex = getRandomQuoteIndex(0, state.quotes.length);\r\n        if (current !== newIndex) {\r\n          state.index = newIndex;\r\n        }\r\n        else {\r\n          return dontRepeat(state, current)\r\n        }\r\n      }\r\n\r\n      dontRepeat(state, currentIndex);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { newQuote } = randomQuote.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectIndex = state => state.quote.quotes[state.quote.index];\r\n\r\nexport default randomQuote.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  newQuote,\r\n  selectIndex\r\n} from './quoteSlice';\r\nimport styles from './Quote.module.css';\r\n\r\nexport function Quote() {\r\n\r\n  const rQuote = useSelector(selectIndex);\r\n  const dispatch = useDispatch();\r\n  const genNewQuote = () => {\r\n    document.querySelector('#quote-box').style.opacity = \"0\";\r\n    setTimeout(() => {\r\n      dispatch(newQuote());\r\n      document.querySelector('#quote-box').style.opacity = \"1\";}, 500);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.Quote} id=\"quote-box\">\r\n      <div className={styles.text_wrapper}>\r\n        <div className={styles.Text} id=\"text\">{rQuote.quote}</div>\r\n      </div>\r\n      <div  className={styles.Author} id=\"author\">{rQuote.author}</div>\r\n      <div className={styles.NewQuote} id=\"new-quote\" onClick={genNewQuote}>New Quote</div>\r\n      <a className={styles.TweetQuote} id=\"tweet-quote\" href={\"https://twitter.com/intent/tweet/?text=\" + (rQuote.quote) + \" \" + (rQuote.author)} target=\"_blank\" rel=\"noreferrer\">Tweet</a>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport { Quote } from './features/quote/Quote';\r\nimport { useDispatch } from 'react-redux';\r\nimport { newQuote } from './features/quote/quoteSlice';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    document.querySelector('#quote-box').style.opacity = \"1\";\r\n    dispatch(newQuote());\r\n  })\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n        <Quote />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport quoteReducer from '../features/quote/quoteSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    quote: quoteReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quote\":\"Quote_Quote__3psEY\",\"text_wrapper\":\"Quote_text_wrapper__3hF-q\",\"Text\":\"Quote_Text__bo4S-\",\"Author\":\"Quote_Author__B66TU\",\"NewQuote\":\"Quote_NewQuote__20n68\",\"TweetQuote\":\"Quote_TweetQuote__39jEt\"};"],"sourceRoot":""}